-*- longlines -*-


======================================================================
TODO Sourcemaps

======================================================================
go methods / js methods.

js uses this, go uses whatever. 

on the first pass, normalize all method names.



======================================================================
Goto Statement.

continuation passing style maybe?
look to see if there is a mechanical way to do this

some good ideas:
http://stackoverflow.com/questions/9751207/how-can-i-use-goto-in-javascript


func main() {
	 temp := 0
	 fmt.Println(1)	 
	 if temp == 0 {
	 	goto skip	 
	 }
	 fmt.Println(2)	 
 skip:
	 fmt.Println(3)	 
}

var main = function() {
    for (i=0; i<1; i++) {
        temp := 0
        fmt.Println(1);
        if temp == 0 {
           goto skip    
        }
        fmt.Println(2)  
    skip:
        fmt.Println(3)     
    }
}


======================================================================
Switch Statements.

Same behavior as go, break statments are generated to prevent fall through.

======================================================================
Scoping.



----------------------------------------------------------------------   
What about goroutines? They look possible, at least in a single thread which is good enough for now.  

Thanks John Tantalo!
http://www.johntantalo.com/blog/go-flavored-javascript/

setTimeOut looks like the best bet.  He's also got good ideas on
channels and blocking.

Web Workers?
NaCl?
continuations? brain violence.

======================================================================
pointers?


Until exp/types is done, there's no way to determine if an expression evalutates to a pointer, therefore the compiler can't translate StarExpr's correctly.  once exp/types is done then move ast.Walk to exp/types.Walk and the nodes should have a type field immediately available.  

UNLESS!

Values are marked as pointers!

function newptr(){
    var inner = function() {
        var val = null;
        var f = function(v) {
            if (arguments.length > 0) {
                val = v;
            }
            return val;
        };
        f.prototype.ptr = true;
        return f;
    };
    return inner();
}





using closures
http://hpyblg.wordpress.com/2010/05/30/simulating-pointers-in-javascript/

Why is this better than 

a = {val:1}
b = {val:2}

function swap(a, b) {
		 temp = a.val
		 a.val = b.val
		 b.val = temp
}


Old pointer thoughts.
------------------------------------------------------------------

OTHERWISE.

May not be possible without destructors or finalizers.

Why? Because either are needed to decrement a reference count.
Also. Including a custom garbage collector written in javascript 
would be insane.
 
Implementing with reference counting.

string_pointer = { addr:123, val:hello }
string_pointer.set_finalizer(){
   if memory_map[123]-- == 0:
   	  set pointer to null?!?! 
	  FSM please have mercy.
   }
}
	
this requires finalizers or destructors.



Are they needed?
Con:
- they may require a global memory map.



Pro:
- remain consistant with go
- possible with refere


reading list:




Pointers may require the exp/type module.  The problem is that code that doesn't syntactically make evident the pointer nature of an expression will require type analysis.


temp := new(int)  // this is easy, new means: Pointer!

temp := NewInt()  // such that NewInt returns an *int
temp2 := *temp    // whaaa.





------------------------------------------------------------------
struct?
No types.
Objects
